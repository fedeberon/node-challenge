swagger: "2.0"
info:
  version: "1.0.0"
  title: "Node Challenge - API"
basePath: "/localhost:3000/"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

paths:
  /api/person:
    post:
      summary: Create a new person
      tags:
        - Person
      security:
        - BearerAuth: []
      responses:
        201:
          description: Created
          schema:
            type: object
            properties:
              id:
                type: integer
              firstName:
                type: string
              lastName:
                type: string
        400:
          description: Bad Request
        500:
          description: Internal Server Error

    get:
      summary: Get all persons
      tags:
        - Person
      security:
        - BearerAuth: []
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Person"
        500:
          description: Internal Server Error

  /api/person/{id}:
    get:
      summary: Get a person by ID
      tags:
        - Person
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Person"
        404:
          description: Not Found
        500:
          description: Internal Server Error

    put:
      summary: Update a person by ID
      tags:
        - Person
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Person"
      responses:
        200:
          description: OK
        400:
          description: Bad Request
        404:
          description: Not Found
        500:
          description: Internal Server Error

    delete:
      summary: Delete a person by ID
      tags:
        - Person
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: OK
        404:
          description: Not Found
        500:
          description: Internal Server Error

  /api/person/:
    delete:
      summary: Delete All People
      description: Deletes all records of people in the database.
      tags:
        - Person
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: Deletion Successful
          schema:
            type: object
            properties:
              message:
                type: string
                example: "5 Person were deleted successfully!"



  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      parameters:
        - in: body
          name: body
          schema:
            $ref: "#/definitions/UserRegistration"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
        400:
          description: Bad Request
        500:
          description: Internal Server Error

  /login:
    post:
      summary: User Login
      description: Logs in a user with their email and password.
      tags:
        - Auth
      parameters:
        - in: body
          name: body
          description: User login credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                example: example@email.com
              password:
                type: string
                example: secretPassword
      responses:
        200:
          description: Authentication Success
          schema:
            type: object
            properties:
              message:
                type: string
                example: Login successful
              token:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: Authentication Error
          schema:
            type: object
            properties:
              error:
                type: string
                example: Invalid password
        404:
          description: User Not Found
          schema:
            type: object
            properties:
              error:
                type: string
                example: User not found
        500:
          description: Server Error
          schema:
            type: object
            properties:
              error:
                type: string
                example: Server error

definitions:
  Person:
    type: object
    properties:
      id:
        type: integer
      firstName:
        type: string
      lastName:
        type: string
